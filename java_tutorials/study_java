General
  Comment : 주석, single(// ...), multi(/* ... */), JavaDoc(/** ... */)

Datatype/데이터형
  character & string
    '문' : 문자
    "문자열" : 문자열
    결합 : "문자"+"열입니다"
    escape : \, "blitz said \"This is Java\"" == blitz said "This is Java"
    줄바꿈 : \n
  datatype 
    정수 : int 기본
      byte(1), short(2 byte), int(4 byte), long(8 byte)
    실수 : double 기본
      float(4 byte), double(8 byte)
    문자
      char(2 byte), String(2 byte 배수)
    variable(변수)
	  int a; double b
	constant(상수)
	  int a = 200; double b = 12345;
	  long c = 12345L; float d = 12345F;
  conversion : 형변환
  	implicit(자동/암시적) : 데이터 손실이 없을 경우 실행.
  	  byte -> short/char -> int -> long -> float ->double
  	explicit(명시적)
  	  int a = (int) 100.0F;

Operator/연산자
  arithmetic : + - * / %
    + : 문자열 합하기에도 사용
    5%3 = 2
  unary : 단항, -10, ++i, i--
    a + b는 binary(이항)
  compare : equal(==), not equal(!=), greater(>), greaterequal(>=), <, <=

Condtion/조건문
  IF문 : if (조건1) {코드1} else if (조건2) {코드2} ... else {코드}
  SWITCH 문: switch (변수) {case 변수:코드;break; ...}

Loop/반복문
  WHILE 문 : while (조건) {코드};
  FOR 문 : for (초기화; 조건; 실행) {코드}
  FOREACH 문 : for (배열원소:배열) {코드}

Array/배열
 	정의 : 데이터형[] 변수명 = {a1, a2...}; 데이터형[] 변수명 = new 데이터형[크기];
  한계 : 정의 할때 크기가 지정되며 사용시 범위를 넘으면 안됨.(collection)
  Eg : String[] sentence = {"This","is","a","sentence"};
  
Object/객체
	class : 객체의 설계도
	instance : 객체, 클래스타입 변수 = new 클래스명()
	constructor/생성자
	 객체의 생성자, 객체를 생성할때 제일 처음 실행, 초기화 작업 실행.
	 클래스명과 동일한 메소드로 직접 정의할수 있음.
	 직접 정의 안하면 자동으로 만들어짐, 직접 정의 하면 기본 생성자를 직접 정의 해야함.
	 상속 : sub class 생성시 super class의 기본 생성자 필수, super()
	void : return이 없음
	static : class property/method, instance와 별개로 존재
	class/instance member
		instance method -> class members
		class method -x-> instance members
	Scope/유효범위
		static scope, lexical scope, 정적인 유효범위, 정의된 지역 변수 -> 전역 변수(Java)
		dynamic scope, 동적인 유효범, 사용 시점 지역 변수 -> 전역 변수 (근대적 언어)
	Inheritance/상속
	  class 자식클래스 extends 부모클래스 {}
	  부모(super, base), 자식(sub, derived)
	  overriding
	  	자식을 부모와 다르게 하는 방법.
	  	부모 클래스의 메소드를 외모가 같고 기능이 다른 자식 메소드로 교체. (property?)
	  	자식 메소드의 서명/signature이 부모와 동일 (메소드 이름, 매개변수 내용, 리턴 타입). super.메소드명
	  	@Override : overriding 할 subclass 메소드를 명확하게 정의
	  overloading 
	  	자식을 부모와 다르게 하는 방법.
	  	부모 메소드와 비슷하지만 기능이 다른 자식 메소들이 부모 메소드와 같이 공존
	  	자식 메소드 이름은 부모와 동일하고 매개변수 내용이 달라야함. 

Package
	import : 패키지 로드, 동일한 이름의 클래스들의 로드 조심.

Java execute
  byte code/바이트코드 : 파일명.class
  java -cp classpath 패키지명.클래스명
    classpath : "java/bin", ".;path1;path2;path3", "." 현재 디렉토리, linux는 ";" 대신 ":" 사용
    package : kr.co.iamtek.java_tutorials.io
    class : Input.class
    java -cp "java/bin" kr.co.iamtek.java_tutorials.io.Input  
    
Java compile
  source code/소스코드 : 파일명.java
  	소드코드는 ANSI로 저장 되어야 컴파일됨.
  	소스코드의 각 클래스마다 개별 클래스 파일 생성 
  javac 소스코드
    soucecode : testing.java
    javac testing.java -> testing.class

Install(Linux)
  Previous version 삭제
    sudo apt-get purge oracle_java*\
  PPA
    sudo apt-add-repository ppa:webupd8team/java
    sudo apt-get update
    sudo apt-get install oracle-java8-installer
  Download
    설치 장소 생성 및 이동 : /usr/local/java
    curl -O 주소
    tar xvfz 파일
    기본 명령어로 등록
      sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/java/jdk1.8.0_92/bin/java" 1;
      sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/java/jdk1.8.0_92/bin/javac" 1;
      sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/java/jdk1.8.0_92/bin/javaws" 1;
      sudo update-alternatives --set java /usr/local/java/jdk1.8.0_92/bin/java;
      sudo update-alternatives --set javac /usr/local/java/jdk1.8.0_92/bin/javac;
      sudo update-alternatives --set javaws /usr/local/java/jdk1.8.0_92/bin/javaws;

  환경변수
    1 : export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
    2 : sudo nano /etc/profile 에 1번 내용 추가
    3 : . /etc/profile
  Windows
    Path : bin 디렉토리 추가
    환경변수
      JAVA_HOME 생성 및 path(bin 제외) 추가.
      CLASSPATH 생성(사용자 변수?) 및 path 추가.
    
Eclipse
  eclipse java macros