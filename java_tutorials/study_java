General
  Comment : 주석, single(// ...), multi(/* ... */), JavaDoc(/** ... */)
  OOP : Abstraction, Inheritance, Polymorphism, Encapsulation

Datatype/데이터형
  character & string
    '문' : 문자
    "문자열" : 문자열
    결합 : "문자"+"열입니다"
    escape : \, "blitz said \"This is Java\"" == blitz said "This is Java"
    줄바꿈 : \n
  datatype 
    정수 : int 기본
      byte(1), short(2 byte), int(4 byte), long(8 byte)
    실수 : double 기본
      float(4 byte), double(8 byte)
    문자
      char(2 byte), String(2 byte 배수)
    variable(변수)
	  int a; double b
	constant(상수)
	  int a = 200; double b = 12345;
	  long c = 12345L; float d = 12345F;
  conversion : 형변환
  	implicit(자동/암시적) : 데이터 손실이 없을 경우 실행.
  	  byte -> short/char -> int -> long -> float ->double
  	explicit(명시적) : cast
  	  int a = (int) 100.0F;

Operator/연산자
  arithmetic : + - * / %
    + : 문자열 합하기에도 사용
    5%3 = 2
  unary : 단항, -10, ++i, i--
    a + b는 binary(이항)
  compare : equal(==), not equal(!=), greater(>), greaterequal(>=), <, <=

Condtion/조건문
  IF문 : if (조건1) {코드1} else if (조건2) {코드2} ... else {코드}
  SWITCH 문: switch (변수) {case 변수:코드;break; ...}

Loop/반복문
  WHILE 문 : while (조건) {코드};
  FOR 문 : for (초기화; 조건; 실행) {코드}
  FOREACH 문 : for (배열원소:배열) {코드}, ENUM 참조

Array/배열
 	정의 : 데이터형[] 변수명 = {a1, a2...}; 데이터형[] 변수명 = new 데이터형[크기];
  한계 : 정의 할때 크기가 지정되며 사용시 범위를 넘으면 안됨.(collection)
  Eg : String[] sentence = {"This","is","a","sentence"};
  
Object/객체
	class : 객체의 설계도
	instance : 객체, 클래스타입 변수 = new 클래스명()
	constructor/생성자
	 객체의 생성자, 객체를 생성할때 제일 처음 실행, 초기화 작업 실행.
	 클래스명과 동일한 메소드로 직접 정의할수 있음.
	 직접 정의 안하면 자동으로 만들어짐, 직접 정의 하면 기본 생성자를 직접 정의 해야함.
	 상속 : sub class 생성시 super class의 기본 생성자 필수, super()
	void : return이 없음
	static : class property/method, instance와 별개로 존재
	class/instance member
		instance method -> class members
		class method -x-> instance members
	Scope/유효범위
		static scope, lexical scope, 정적인 유효범위, 정의된 지역 변수 -> 전역 변수(Java)
		dynamic scope, 동적인 유효범, 사용 시점 지역 변수 -> 전역 변수 (근대적 언어)
	Inheritance/상속
	  class 자식클래스 extends 부모클래스 {}
	  부모(super, base), 자식(sub, derived)
	  overriding
	  	자식을 부모와 다르게 하는 방법.
	  	부모 클래스의 메소드를 외모가 같고 기능이 다른 자식 메소드로 교체. (property?)
	  	자식 메소드의 서명/signature이 부모와 동일 (메소드 이름, 매개변수 내용, 리턴 타입). super.메소드명
	  	@Override : overriding 할 subclass 메소드를 명확하게 정의
	  overloading 
	  	자식을 부모와 다르게 하는 방법.
	  	부모 메소드와 비슷하지만 기능이 다른 자식 메소들이 부모 메소드와 같이 공존
	  	자식 메소드 이름은 부모와 동일하고 매개변수 내용이 달라야함. 

Package
	구조 : root(project src & bin)/package/파일(*.java & *.class)
	사용 : 패키지 로드, 동일한 이름의 클래스들의 로드 조심.
		import kr.co.iamtek.java

Modifier(제어자)
	Access(접근)
		기능 : 사용/접근 여부를 정하는 제어자.
			public일 경우 파일명 = 클래스명, 즉 소스코드 하나당 public class가 한개만 존재 가능.
		대상 : class, class member
			Class member : public > protected > default > private
			Class : public > default
		종류 : 일반적으로 public 사용, 보안이 중요하면 private 사용.
			public : 모두 사용/접근 가능.
			protected : 같은 package, 다른 package 상속관계 사용/접근 가능. 
			default : 같은 package만 사용/접근 가능.
			private : 같은 class만 사용/접근 가능.
	Abstract(추상화)
		기능 : 상속을 강제 하는 제어자.
		 	부모 클래스는 형식만 정하고 상세 동작 방법은 자식 클래스에게 위임.
		 	일반 메소드 존재 가능.
		대상 : class, method
		 	class : 추상 클래스는 직접 사용 못하고 상속을 통해서만 사용 가능.
		 	method : 부모의 추상 메소드는 자식이 override 해서 사용.
	Final
		기능 : 상속을 금지 하는 제어자, abstract의 반대.
		대상 : class, class members
			class : final class는 자식 클래스를 생성 못함, 즉 상속이 불가능.
			method : final method는 자식 클래스에서 override이 불가능, overload는 가능.
			field : final field는 값이 정해지면 변경이 불가능.
	Interface
		class 클래스 implements 인터페이스 {}, 클래스는 인터페이스를 구현.
		field : public static final
		method : public abstract.

Polymorphism(다향성)
	Concept : 무언가가 상황에 따라 다르게 동작/행동 하는것.
	method : method overload
	class : ParentClass 클래스 = new ChildClass()
		자식클래스 인스턴스가 부모 클래스 행세를 하는것, 데이터형이 부모인 자식 인스턴스.
		override method(부모에게 물려받은, 부모에게 존재)만 사용 가능, 자식 method가 사용.
		interface도 동일.

Exception(예외)
	Exception class instance, e
		e.getMessage() e.toString() e.printStackTrace()
	Try-catch : Exception을 받아서 처리.
		syntax : try{logic1} catch(Exception e) {logic2} catch() {}...finally {logic3}
		logic1 : 오류 가능성이 있는 코드.
		logic2 : 코드1 오류 발생시 실행 되는 코드.
		logic3 : 오류와 관계없이 실행 되는 코드.
	Throws : Exception을 호출자/사용자에게 넘기기.
		syntax : method() throws eClass1, eClass2 {}
	Manual handling : 직접 예외 처리 만들기
		syntax : throw new eClass()
	Checked vs unchecked
		Checked : 강제 예외 처리, 예외도 예외 처리, RuntimeException이 상위 클래스에 없음.
		Unchecked : 예외 처리 자유, RuntimeException이 상위 클래스에 존재.
		
Progenitor Object class
	설명 : 모든 클래스의 시조 클래스
		class Obj {} == class Obj extends Object {}
	메소드 : 모든 클래스는 Object 클래스의 메소드를 물려 받아 사용 가능하며 override를 통해 기능 변경 가능.
		toString() : 객체->문자열, 수정 권장
		equals() : 동일한지 비교, 객체의 경우 그대로 원시 데이터형은 수정(조심)하거나 == 비교 연산자 사용
		finalize() :
		clone() : 객체 복제, Cloneable interface 구현 필요, 복제된 객체의 데이터형 조심.
		
ENUM/Enumerated type (열거형)
	설명 : 연관된 상수들의 집합, 연관된 변수들의 집합인 배열과 비슷, foreach로 처리 가능.
	특징 : 클래스와 비슷하되 인스턴스 생성(private constructor) 및 상속 불가.
	FOREACH 문 :
		enum example {};
		for (example no : example.values()) {코드};

Reference (참조)
	Primitive/원시형 : 8개. byte short int long, float double, boolean, char.
	Reference/참조형 : 원시형을 제외한 데이터형, 객체, 선언할때 new 즉 생성자를 사용.

Java execute
  byte code/바이트코드 : 파일명.class
  java -cp classpath 패키지명.클래스명
    classpath : "java/bin", ".;path1;path2;path3", "." 현재 디렉토리, linux는 ";" 대신 ":" 사용
    package : kr.co.iamtek.java_tutorials.io
    class : Input.class
    java -cp "java/bin" kr.co.iamtek.java_tutorials.io.Input  
    
Java compile
  source code/소스코드 : 파일명.java
  	소드코드는 ANSI로 저장 되어야 컴파일됨.
  	소스코드의 각 클래스마다 개별 클래스 파일 생성 
  javac 소스코드
    soucecode : testing.java
    javac testing.java -> testing.class

Install(Linux)
  Previous version 삭제
    sudo apt-get purge oracle_java*\
  PPA
    sudo apt-add-repository ppa:webupd8team/java
    sudo apt-get update
    sudo apt-get install oracle-java8-installer
  Download
    설치 장소 생성 및 이동 : /usr/local/java
    curl -O 주소
    tar xvfz 파일
    기본 명령어로 등록
      sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/java/jdk1.8.0_92/bin/java" 1;
      sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/local/java/jdk1.8.0_92/bin/javac" 1;
      sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/local/java/jdk1.8.0_92/bin/javaws" 1;
      sudo update-alternatives --set java /usr/local/java/jdk1.8.0_92/bin/java;
      sudo update-alternatives --set javac /usr/local/java/jdk1.8.0_92/bin/javac;
      sudo update-alternatives --set javaws /usr/local/java/jdk1.8.0_92/bin/javaws;

  환경변수
    1 : export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
    2 : sudo nano /etc/profile 에 1번 내용 추가
    3 : . /etc/profile
  Windows
    Path : bin 디렉토리 추가
    환경변수
      JAVA_HOME 생성 및 path(bin 제외) 추가.
      CLASSPATH 생성(사용자 변수?) 및 path 추가.
    
Eclipse
  ctrl+d : line 지우기
  ctrl+z : 취소