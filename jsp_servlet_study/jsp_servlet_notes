General
	WAS : Web application server, apache tomcat
	MVC
		Model(DB?)
		View : JSP
			.jsp 파일, Tomcat에서 자동으로 .java .class로 변환
			위치 : tomcat폴더\work\Catalina\localhost\jsp\org\apache\jsp
		Controller : servlet, .java 파일
	java servlet의 장점
		Thread : 타 CGI 언어에 비해 서버 부하 낮음.
		재활용 : 동작 속도 빠름, 최초 요청때 객체 생성 메모리 로딩, 이후 요청은 기존 객체 재활용.

04 Servlet
	General
		생성 : Project -> servlet, superclass : HttpServlet, mapping
		superclass 문제가 있으면 project buildpath lib에 apache tomcat 확인	
		.java 파일, 수정되면 server restart
	Mapping
		Annotation
			@WebServlet("/매핑명"), .java 소스파일에 직접 입력.
		web.xml
			<web-app>에 <servlet> <servlet-mapping> 추가
	
05 Servlet
	doGet() : servlet의 일반적 호출시 사용
	doPost() : form 요청이 post 방식일 경우 사용
	Context path : server.xml, 웹어플 구분 정보

06 Servlet
	작동 순서
		client(web browser) -> web server -> WAS -> servlet container(create thread & object)
	생명주기
		최초 한번 : Servlet 객체 생성 -> Init() 호출
		요청시 매번 : service(), doGet(), doPost()
		마지막 한번 : destroy() 호출, servlet 수정 서버 restart 같은 자원 해제
	선처리 후처리
		@PostConstruct @PreDestroy annotation을 통해 선처리 후처리 메소드 지정.
	
07 Servlet
	Form -> HttpServletRequest -> parameters
	Form tag
		<form action="요청 컴포넌트명" method="전송방식">
		요청 컴포넌트 : .jsp, .html, HWorld
		전송 방식 : get(url에 정보 같이 보내짐), post()
	Servlet parameter
		getParameter(name) : 1개
		getParameterValues(name) : 복수, checkbox
		getParameterNames() : form component names 
	Character encoding (KR) 
		get : server.xml -> <connector>, URIEncoding="EUC-KR" 추가, publish 실행?
		post : servlet -> doPost, request.setCharacterEncoding("EUC-KR") 추가
	동작
		Client->server
			HttpServletRequest 데이터형 request 객체를 통해 정보를 가져옴
			HttpServletRequest 메소드를 사용하여 데이터 추출
			eg)
				String id = request.getParameter("id");
		Server->client
			HttpServletRequest 데이터형 reponse 객체에 정보를 넣어서 보냄
			eg)
				response.setContentType("text/html; charset = EUC-KR");
				PrintWriter writer = response.getWriter();
				writer.println("<html><head></head><body>");
				writer.close();

08 Servlet
	Servlet initialization : 특정 servlet 초기화
		indirect : web.xml에 기술하고 servlet에서 ServletConfig 클래스를 통해 사용
			web.xml : <servlet>에 <init-param> 추가
			servlet : ServletConfig 메소드 getInitParameter() 사용
		direct : servlet의 @WebServlet에 @WebInitParam 추가
			@WebServlet(urlPatterns={"매핑명"}, initParams={@WebInitParam(초기화1), @WebInitParam()...})
	ServletContext : 데이터 공유, 복수 servlet 초기화
		web.xml에 기술하고 여러 servlet에서 공유
		web.xml : <servlet> 상단에 <context-param> 추가
		servlet : ServletContext 메소드 getServletContext().getInitParameter() 사용
	ServletContextListener : 웹어플리케이션 생명주기 감시
		감시 클래스 생성 : ServletContextListener 인터페이스 구현
		web.xml : <web-app>에 <listener> 추가
		listener class : @WebListener 추가
		
09 JSP
	General
		Java Server Pages : HTML 코드안에 Java 코드를 삽입, servlet은 java에 HTML 삽입
		Fast : servlet으로 동작, 최초 JSP->class 변환 추가
	JSP Tags
		<%@ ... %> : Directive, page 속성
		<%-- ... --%> : Comment, 서버이기 때문에 clients에서 보이지 않음
		<%! ... %> : Declaration, 변수 & 메소드 선언
		<%= ... %> : Expression, 결과값 출력, 끝에 ";" 없음
		<% ... %> : Scriptlet, java code, muti-line
		<jsp:action> </jsp:action> : Action-tags, Java bean
	Architecture
		1. Client(web browser) 요청 : Client(JSP, helloWorld.jsp) -> Server(JSP container, tomcat)
		2. Server 처리 : JSP(helloWorld.jsp) -> Servlet(helloWorld_jsp.java) -> Class(helloWorld_jsp.class), 자동
		3. Client 응답 : Server -> Client(HTML, web browser)
	Built-in objects
		내부 객체, JSP->Servlet 변환시 자동으로 생성되어 바로 사용 가능한 객체.
		IO(request, response, out), servlet(page, config), session, exception
				
10 JSP
	Script
		scriplet, declaration, expression : used for inserting java codes into JSP documents\
		Scriplet : <% java 코드 %>
		Declaration : <%! variable method 선언 %>, 메소드는 필수, 변수는 왜?
	Directive
		<%@ 속성 %> : JSP page의 속성 지정
		page : 현재 page의 속성 지정
		include : 현재 page에 다른 page 삽입
		taglib : tag library, 사용자 정의 tag?
	Comment